#include <usbmidi.h>
#include <Arduino.h>
//#include <BLEMidi.h>


//
#define SWITCH1 A0
#define SWITCH2 A1
#define SWITCH3 A2
#define SWITCH4 A3
#define SWITCH5 4
#define SWITCH6 5
#define SWITCH7 6
#define SWITCH8 7
#define SWITCH9 8
#define SWITCH10 9
#define SWITCH11 10
#define SWITCH12 11
#define SWITCH13 12  // Not currently used - may use as panic button
#define BOUNCEDELAY 25

int Transpose = 0; //Not implemented yet
int switches[13] = {SWITCH1, SWITCH2, SWITCH3, SWITCH4, SWITCH5, SWITCH6, SWITCH7, SWITCH8, SWITCH9, SWITCH10, SWITCH11, SWITCH12, SWITCH13};
int switchState[13] = {HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH, HIGH};
int TriggeredNote[13] = {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60};
int currentSwitch = 0;

void sendNote(uint8_t channel, uint8_t note, uint8_t velocity) {
  USBMIDI.write((velocity != 0 ? 0x90 : 0x80) | (channel & 0xf));
  USBMIDI.write(note & 0x7f);
  USBMIDI.write(velocity & 0x7f);
}

void setup() {
  //Serial.begin(115200);
  //  Serial.println("Initializing bluetooth");
  //  BLEMidiServer.begin("BG MIDI Controller");
  //  Serial.println("Waiting for connections...");
  for ( currentSwitch = 0; currentSwitch < 13; currentSwitch++ ) // 13 not skipped here deliberately
  {
    pinMode(switches[currentSwitch], INPUT_PULLUP);        // Set GPIO pins for Input
  }
}

void loop()
{

  //if (BLEMidiServer.isConnected())
  {
    //Handle USB communication
    USBMIDI.poll();

    while (USBMIDI.available()) {
      // We must read entire available data, so in case we receive incoming
      // MIDI data, the host wouldn't get stuck.
      u8 b = USBMIDI.read();
    }

    for ( currentSwitch = 0; currentSwitch < 12; currentSwitch++ )  // 13 skipped here deliberately
    {
      if (digitalRead(switches[currentSwitch]) != switchState[currentSwitch] )
      {
        Serial.println("Current Switch = ");
        Serial.println(currentSwitch);
        Serial.println("Name = ");
        Serial.println(switches[currentSwitch]);
        Serial.println("Stored State = ");
        Serial.println(switchState[currentSwitch]);
        if ( switchState[currentSwitch] == LOW )                        // Note is playing
        {
          Serial.println ("Note is playing:");
          Serial.println (TriggeredNote[currentSwitch]);
          sendNote(0, TriggeredNote[currentSwitch], 0);  // Turn off note
          Serial.println("Note was turned off.");
          switchState[currentSwitch] = HIGH ;                           // Change status of note to HIGH (off)
          Serial.println("New State = " && switchState[currentSwitch]);
          delay( BOUNCEDELAY );
        }
        else                                                            // Note is not playing
        {
          Serial.println ("Note is not playing:");
          Serial.println (TriggeredNote[currentSwitch]);
          sendNote(0, TriggeredNote[currentSwitch], 127);   // Turn on note
          Serial.println("Note was turned on.");
          switchState[currentSwitch] = LOW;                             // Change status of note to LOW (off)
          Serial.println("New State = " && switchState[currentSwitch]);
          delay( BOUNCEDELAY );
        }
      }
    }
  }
  // Flush the output.
  USBMIDI.flush();
}
